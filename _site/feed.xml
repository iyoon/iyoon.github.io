<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hyungwon ,Yoon</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://iyoon.github.io/</link>
    <atom:link href="http://iyoon.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 May 2015 11:10:47 +0900</pubDate>
    <lastBuildDate>Thu, 21 May 2015 11:10:47 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>quartz cron expression </title>
        <description>&lt;h2 id=&quot;quartz-cron-expression&quot;&gt;quartz cron expression&lt;/h2&gt;

&lt;p&gt;cron expression 은 6필드 또는 7필드로 구성이되고 각 글자는 공백으로 구분짓는다. &lt;br /&gt;
표현식은 숫자와 특수문자 (special charaters)로 구성된다. 마지막 년도 필드는 필수 입력이 아니다.  &lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;필드이름&lt;/th&gt;
      &lt;th&gt;필수&lt;/th&gt;
      &lt;th&gt;범위&lt;/th&gt;
      &lt;th&gt;사용할 수있는 특수문자&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;초&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;0-59&lt;/td&gt;
      &lt;td&gt;, - * /&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;분&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;0-59&lt;/td&gt;
      &lt;td&gt;, - * /&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;시간&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;0-23&lt;/td&gt;
      &lt;td&gt;, - * /&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;일&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;1-31&lt;/td&gt;
      &lt;td&gt;, - * ? / L W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;월&lt;/td&gt;
      &lt;td&gt;YES&lt;/td&gt;
      &lt;td&gt;1-12 또는 JAN-DEC&lt;/td&gt;
      &lt;td&gt;, - * /&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;요일&lt;/td&gt;
      &lt;td&gt;1-7 또는 SUN-SAT&lt;/td&gt;
      &lt;td&gt;0-59&lt;/td&gt;
      &lt;td&gt;, - * ? / L W&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;년도&lt;/td&gt;
      &lt;td&gt;NO&lt;/td&gt;
      &lt;td&gt;empty, 1970-2099&lt;/td&gt;
      &lt;td&gt;, - * /&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;section&quot;&gt;특수문자&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;* : 모든값에 매칭 매 분/매 시 마다 수행할 때 사용한다. &lt;/li&gt;
  &lt;li&gt;? : 값을 정의 하지 않을 때 사용한다.  &lt;/li&gt;
  &lt;li&gt;- : 범위를 지정할 때 사용한다. 시간 필드에 사용한다면 1-5 로 지정하면 1시에서 5시에 수행된다.&lt;/li&gt;
  &lt;li&gt;, : 나열하여 지정할 때 사용한다. 시간 필으데 사용한다면 1,5,7 로 지정하면 1시,5시,7시에 수행된다. &lt;/li&gt;
  &lt;li&gt;/ : 증가값을 정의할 때 사용된다. 예를 들어 분 필드에 0/10 으로 지정하면 0분에 시작하여 10분마다 수행된다.&lt;/li&gt;
  &lt;li&gt;L(Last): 달의 마지막날짜, 주의 마지막날짜를 지정하여 수행 할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;W (Weekday): 주어진 날짜의 가장 가까운 평일(월~금)을 지정하여 수행할 때 사용한다. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;n---&quot;&gt;특정 시간대에 n 분마다 수행되도록 설정하기&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0 0/2 22-23,0-4 * * ?&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;매일 오후10시 부터 새벽 5시까지 2분마다 수행이 되도록 설정하였다.  해당 정의를 하면서 실수 했던 점은 아래와 같다. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;새벽 5시까지 수행되도록 할려면 0 - 5 가 아니라 0 - 4 이다.  &lt;/li&gt;
  &lt;li&gt;오후 10시 부터 새벽 5시는 22-4로 범위를 지정하면 원하는 대로 수행이 되지 않는다.&lt;br /&gt;
따라서 시간 필드에서 자정을 중간에 포함하는 범위를 지정할 경우에는 나누어서 범위를 표현해야 한다. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;cron-expression-test--generator-&quot;&gt;cron expression TEST 와 Generator 사이트&lt;/h1&gt;
&lt;p&gt;http://www.cronmaker.com/ 사이트에서 테스트와 생성이 가능하다. 
테스트는 입력한 표현식의 수행되는 시간을 출력해준다. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고자료&lt;br /&gt;
&lt;a href=&quot;http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger&quot;&gt;quartz cron expression&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 18 May 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/05/18/cron-expression.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/05/18/cron-expression.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>rsync 설정하기</title>
        <description>&lt;h2 id=&quot;rsync-&quot;&gt;rsync 설정하기&lt;/h2&gt;
&lt;p&gt;서버 간 파일의 동기화를 할 때 rsync 설정으로 간단히 동기화를 할 수 있다.&lt;br /&gt;
이번 포스트에서 설정 방법에 대해서 정리를 해보았다.  &lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;[서버 설정]&lt;/h2&gt;

&lt;h1 id=&quot;rsync--&quot;&gt;rsync 설정파일 추가&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi /etc/rsyncd.conf&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 서비스명 &lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sample-service&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 동기화 할 디렉토리 경로 &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/file
&lt;span class=&quot;nv&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
use &lt;span class=&quot;nv&quot;&gt;chroot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes
&lt;span class=&quot;nb&quot;&gt;readonly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;yes
&lt;span class=&quot;c&quot;&gt;# 호스트(클라이언트)IP  &lt;/span&gt;
hosts &lt;span class=&quot;nv&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;xinetd-rsync--&quot;&gt;xinetd rsync 설정파일 수정&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi /etc/xinetd.d/rsync&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#disable = yes &lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;disable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; no&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;xinetd-&quot;&gt;xinetd 재구동하기&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc/init.d/xinetd stop 
/etc/init.d/xinetd start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;방화벽 열기&lt;/h1&gt;
&lt;p&gt;rsync를 통해 서버와 클라이언트간 동기화 할 때 사용되는 포트를 방화벽에서 열어준다.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi /etc/sysconfig/iptables&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 873 -j ACCEPT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-2&quot;&gt;방화벽 재시작하기&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/etc/init.d/iptables stop 
/etc/init.d/iptables start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;[클라이언트 설정]&lt;/h2&gt;

&lt;p&gt;주기적으로 동기화를 하기위해서 crontab에 rsync 명령을 추가한다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;vi crontab - e&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;* * * * * rsync -avz 192.168.0.2::sample-service /path/file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이렇게 설정 하면 192.168.0.2 (서버IP)에서 sample-service 이라는 서비스(서버의 rsyncd.conf에 정의됨)에 설정된 디렉토리의 파일을 
클라이언트의 /path/file 디렉토리의 파일을 동기화 해준다. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고자료&lt;br /&gt;
&lt;a href=&quot;http://calflove.tistory.com/337&quot;&gt;서버들간 데이터 동기화 방안 중 가장 간단한 rsync 설정방법&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://fruitdev.tistory.com/38&quot;&gt;Rsync 설치하기&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 11 May 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/05/11/rsync.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/05/11/rsync.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>SQL Tuning</title>
        <description>&lt;h1 id=&quot;issue&quot;&gt;Issue&lt;/h1&gt;
&lt;p&gt;특정 페이지의 조회가 매우 느리다는 유지보수 건을 처리하게 되었다.
서비스 페이지에서 확인 해본 결과 조회를 하는데 1분이상 걸리고 때로는 time out이 났다. &lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;확인&lt;/h1&gt;
&lt;p&gt;페이지 조회의 쿼리를 질의브라우저에서 실행해본 결과 질의 시간도 5초이내로 수행되고 검색결과도 많지 않았다. 
쿼리에 문제가 없는 것으로 생각하고 Java에서 lock이 걸리는 것이 있는지 확인을 해보았지만 lock이 걸린것도 아니었다. 
실행 결과 수도 100건이하였고, 단순히 리스트를 조회하여 화면에 출력하는 부분이어서 처리 수행시간이 오래 걸릴 부분이 아니었다.  &lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;원인&lt;/h1&gt;
&lt;p&gt;DBA님을 통해 확인해본 결과 큐브리드는 DB에 직접 연결을 하는것이 아니라 브로커(broker)를 통해서 질의를 수행하고 처리결과를 사용자에게 준다. 
각 브로커는 접속포트별로 있으며, 브로커별로 별도의 쿼리플랜을 캐쉬에 저장한다고 한다. 
따라서 서비스단의 브로커의 쿼리플랜이 질의 브라우저에서 수행한 브로커의 쿼리플랜과 달라서 수행시간에 차이가 있었던 것이다.&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;해결&lt;/h1&gt;
&lt;p&gt;쿼리 플랜을 확인 해본 결과 데이터가 많은 매핑테이블에서 full scan이 있었다.
index scan이 될 수 있도록 index를 변경하였지만 그럼에도 플랜이 full scan이 되는 문제가 있었다.
플랜을 수정하기 위해  /&lt;em&gt;+USE_IDX ORDERED&lt;/em&gt;/ 쿼리 힌트를 추가하고 나니 질의 속도가 매우 빨라졌고 해당 이슈를 해결 할 수 있었다. &lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/05/04/SQLTuning.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/05/04/SQLTuning.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>sublime-jekyll 플러그인 </title>
        <description>&lt;p&gt;블로그에 글을 올릴 때 에디터로 Sublime Text를 사용하고 있다. jekyll 플러그인이 있어 사용해보았다. &lt;/p&gt;

&lt;h2 id=&quot;sublime-jekyll-&quot;&gt;sublime-jekyll 플러그인&lt;/h2&gt;

&lt;h1 id=&quot;install-osx-&quot;&gt;Install (OSX) 하기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;PackageControl을 연다. command + shift + p (Tools &amp;gt; Commmand Palette menu) &lt;/li&gt;
  &lt;li&gt;Package Control : Install Package 선택 &lt;/li&gt;
  &lt;li&gt;Package Control이 없다면 Package Control부터 설치한다.&lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;Install PackageControl&lt;/a&gt; 에서 사용 중인 버전 (Sublime Text 2 Or Sublime Text3) 스크립트 복사 &lt;/li&gt;
      &lt;li&gt;View &amp;gt; Show Console(Ctrl + ‘) 복사한 스크립트를 실행하 Package Control 이 설치된다.   &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Install Pacakcge 를 선택하면 나오는 검색 창에서 jekyll로 검색하여 나오는 jekyll을 설치한다. &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;section&quot;&gt;설정하기&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Preference &amp;gt; Pacakge Settings &amp;gt; Jekyll &amp;gt; Settings - Users&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;posts_path, drafts_path를 설정한다. 
그외 default 설정이나 날짜 포맷 등을 필요에 따라 설정 할 수 있다. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{

    // This should point to your &amp;quot;_posts&amp;quot; directory.
    // NOTE: This should be an absolute path. Also, the path should
    // match your system convention. For example, Windows machines should
    // have a path similar to &amp;quot;C:\\Users\\username\\site\\_posts&amp;quot;.
    // *nix systems should have a path similar to &amp;quot;/Users/username/site/_posts&amp;quot;.
    &amp;quot;posts_path&amp;quot;: &amp;quot;/Users/nhnent/iyoon.github.com/_posts&amp;quot;,

    // This should point to your &amp;quot;_drafts&amp;quot; directory.
    // NOTE: This should be an absolute path. Also, the path should
    // match your system convention. For example, Windows machines should
    // have a path similar to &amp;quot;C:\\Users\\username\\site\\_drafts&amp;quot;.
    // *nix systems should have a path similar to &amp;quot;/Users/username/site/_drafts&amp;quot;.
    &amp;quot;drafts_path&amp;quot;: &amp;quot;/Users/nhnent/iyoon.github.com/_drafts&amp;quot;,

    // If you have multiple Jekyll blogs, but don&amp;#39;t use Sumblime Projects,
    // you can optionally have sublime-jekyll look for the `_posts` or `_drafts`
    // folders open in your sidebar. This should have a value of true or false.
    &amp;quot;automatically_find_paths&amp;quot;: false,

    // This string value should represent the default syntax for a new post.
    // Valid options are: &amp;quot;Markdown&amp;quot;, &amp;quot;Textile&amp;quot;
    &amp;quot;default_post_syntax&amp;quot;: &amp;quot;Markdown&amp;quot;,

    /** *****************************************************************************
     * Post Front-matter Defaults
     *
     * Set these values to make your life easier when composing new posts. This is
     * similar to setting your defaults as part of the `_config.yml` file:
     *
     * http://jekyllrb.com/docs/configuration/#front-matter-defaults
     * ******************************************************************************
     */

    // This string value should represent the default layout for new posts.
    &amp;quot;default_post_layout&amp;quot;: &amp;quot;&amp;quot;,

    // This value should represent the default categories for new posts.
    // Each category should be entered as a list item in string format
    // with commas separating values [&amp;quot;cat1&amp;quot;, &amp;quot;cat2&amp;quot;]. To remove this key
    // from your front-matter completely, pass a value of `null`.
    &amp;quot;default_post_categories&amp;quot;: [],

    // This value should represent the default tags for new posts.
    // Each tag should be entered as a list item in string format
    // with commas separating values [&amp;quot;tag1&amp;quot;, &amp;quot;tag2&amp;quot;]. To remove this key
    // from your front-matter completely, pass a value of `null`.
    &amp;quot;default_post_tags&amp;quot;: [],

    // A boolean specifying if you want new posts to be marked as published.
    // To remove this key from your front-matter completely, pass a value of `null`.
    &amp;quot;default_post_published&amp;quot;: true,

    // If you need to add additional front-matter `key: value` information to
    // your posts, you can store them in a dictionary object using a format
    // like {&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;, &amp;quot;baz&amp;quot;: &amp;quot;qux&amp;quot;}. This dictionary will be appended to
    // any of the enabled default keys above (Reminder: the `title` and `layout`
    // keys will always be included, so **DO NOT** include them in the extras dictionary).
    &amp;quot;default_post_extras&amp;quot;: {},

    /** ***********************************************************************************
     * If for some reason you want to change the way either the date
     * or the datetime string is formatted, you can override those formats
     * here using valid Python datetime.strftime() format codes.
     *
     * If you need a refresher on these codes, have a look at the Python
     * documentation found here:
     *
     * http://docs.python.org/2/library/datetime.html#strftime-and-strptime-behavior
     * ******************************************************************************
     */

    // A valid Python strftime string
    &amp;quot;insert_date_format&amp;quot;: &amp;quot;%Y-%m-%d&amp;quot;,

    // A valid Python strftime string
    &amp;quot;insert_datetime_format&amp;quot;: &amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;

}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;section-1&quot;&gt;기능&lt;/h1&gt;

&lt;p&gt;Command + shift + p 에서 jekyll 플러그인의 기능을 사용 할 수 있다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll: New post &lt;/li&gt;
  &lt;li&gt;Jekyll: New draft &lt;/li&gt;
  &lt;li&gt;Jekyll: Open post&lt;/li&gt;
  &lt;li&gt;Jekyll: Open draft&lt;/li&gt;
  &lt;li&gt;Jekyll: Insert current date &lt;/li&gt;
  &lt;li&gt;Jekyll: Insert current datetime &lt;/li&gt;
  &lt;li&gt;Jekyll: Promote draft to post&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;syntax-&quot;&gt;Syntax 강조&lt;/h1&gt;
&lt;p&gt;Set Syntax:Markdown(Jekyll)&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;자동완성&lt;/h1&gt;

&lt;p&gt;축약형을 입력한 후 Tab을 누르면 자동완성이 된다.&lt;br /&gt;
hightlight + Tab = {% highlight %}{% endhighlight %} &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;assign: {% assign a = b %}&lt;/li&gt;
  &lt;li&gt;capture: {% capture %}{% endcapture %}&lt;/li&gt;
  &lt;li&gt;case: {% case %}{% endcase %}&lt;/li&gt;
  &lt;li&gt;comment: {% comment %}{% endcomment %}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://packagecontrol.io/packages/Jekyll Snippets &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고자료&lt;br /&gt;
&lt;a href=&quot;https://packagecontrol.io/packages/Jekyll&quot;&gt;sublime-jekyll&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;Install PackageControl&lt;/a&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 27 Apr 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/04/27/sublimeText-jekyll-plugin.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/04/27/sublimeText-jekyll-plugin.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Thread Dump 생성하기</title>
        <description>&lt;p&gt;해당 포스트는 이상민 강사님의 트러블슈팅 가이드 강의를 듣고 작성하였습니다.&lt;br /&gt;
덤프란 메모리상의 내용을 프린트나 파일로 출력하여 내용을 확인 할 수 있는 것을 말한다. 주로 오류 수정을 위해 원인을 파악하는데 이용이 된다. 
장애가 발생하였을 때 원인을 파악하기 위해 덤프파일을 생성하는 것이 중요하다.  &lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;쓰레드 덤프&lt;/h2&gt;

&lt;p&gt;쓰레드의 스택과 상태 정보를 파일로 출력한다.&lt;br /&gt;
쓰레드 덤프를 생성하는 시점의 쓰레드의 스택과 상태를 저장한다는 점에 유의 해야 한다.&lt;br /&gt;
따라서 쓰레드의 상태변화를 확인하기 위해서는 10~20초 간격으로 적어도 5~10번 정도로 덤프를 생성해야 한다.  &lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;쓰레드 덤프 생성 명령어&lt;/h2&gt;

&lt;h1 id=&quot;kill-&quot;&gt;kill 명령어&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -3 pid 또는 &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; -quit pid&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;덤프파일은 해당 프로세스가 실행되는 콘솔이나 로그파일에 출력된다.&lt;br /&gt;
WAS(Tomcat)의 경우에는 catalina.out 파일에 덤프가 출력되는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;맥용 터미널 프로그램인 iTerm을 사용하면 쉽게 덤프파일을 로컬 환경에 저장 할 수 있다. 
	1. Shell &amp;gt; log &amp;gt; start
	2. 덤프 로그파일이 저장 될 경로와 파일명을 지정 
	3. 덤프 생성 명령어 수행 
	4. Sheell &amp;gt; log &amp;gt; stop 
	5. (2)에서 지정한 덤프 파일 경로에 덤프파일 확인 &lt;/p&gt;

&lt;h2 id=&quot;pid---&quot;&gt;pid 확인 하는 방법&lt;/h2&gt;

&lt;h1 id=&quot;ps-&quot;&gt;ps 명령어&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ps -ef &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; grep java&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ps 명령어는 현재 실행되고 있는 프로세스의 상태를 표시하는 명령어이다. 
파이프로 grep 사용하여 “java” 문자열을 포함하는 프로세스를 찾는다. 
- e: 모든 계쩡의 프로세스를 출력
- f: 프로세스의 자세한 정보를 출력 &lt;/p&gt;

&lt;p&gt;UID/pid/PPID/CSTIME/TTY/TIME/CMD 포맷으로 출력되므로 두번째 탭의 숫자값이 pid이다. &lt;/p&gt;

&lt;h1 id=&quot;jps-&quot;&gt;jps 명령어&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jps pid&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-v : 자세한 정보를 함께 출력
 jsp 명령어를 쳤을 때 process 명이 출력되지 않는 경우에는&lt;br /&gt;
 temp 에 저장되는 프로세스 정보가 없을 때 그렇게 나오게 된다. &lt;br /&gt;
 /tmp/hsperfdata_계정명/pid 파일에 프로세스의 정보가 계속해서 업데이트 되어 저장 된다.&lt;br /&gt;
 해당 파일이 삭제가 되거나 없다면 jps, jstat, jstack 과 같은 명령어을 사용 할 수 없다.&lt;/p&gt;

&lt;p&gt;쓰레드 덤프가 아래와 같이 출력된다.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;2015-04-19 20:34:53 
Full thread dump Java HotSpot&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;TM&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 64-Bit Server VM &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;23.25-b01 mixed mode&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

&lt;span class=&quot;s2&quot;&gt;&amp;quot;ajp-bio-8001-exec-16&amp;quot;&lt;/span&gt; daemon &lt;span class=&quot;nv&quot;&gt;prio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x00007fbded760000 &lt;span class=&quot;nv&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x7fab waiting on condition &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00007fbe0c4b8000&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
   java.lang.Thread.State: WAITING &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;parking&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        at sun.misc.Unsafe.park&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        - parking to &lt;span class=&quot;nb&quot;&gt;wait &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00000000e35ebca8&amp;gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;a java.util.concurrent.locks.AbstractQueuedSynchronizer&lt;span class=&quot;nv&quot;&gt;$ConditionObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        at java.util.concurrent.locks.LockSupport.park&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LockSupport.java:186&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        at java.util.concurrent.locks.AbstractQueuedSynchronizer&lt;span class=&quot;nv&quot;&gt;$ConditionObject&lt;/span&gt;.await&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;

        
 ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;중간 생략 &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;s2&quot;&gt;&amp;quot;VM Thread&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x00007fbe100b0000 &lt;span class=&quot;nv&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x61be runnable 

&lt;span class=&quot;s2&quot;&gt;&amp;quot;VM Periodic Task Thread&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;prio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x00007fbe10520000 &lt;span class=&quot;nv&quot;&gt;nid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x61d7 waiting on condition 

JNI global references: 386

Heap
 def new generation   total 184320K, used 110783K &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000d5600000, 0x00000000e1e00000, 0x00000000e1e00000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  eden space 163840K,  64% used &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000d5600000, 0x00000000dbc7b588, 0x00000000df600000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  from space 20480K,  28% used &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000df600000, 0x00000000dfbb48d8, 0x00000000e0a00000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  to   space 20480K,   0% used &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000e0a00000, 0x00000000e0a00000, 0x00000000e1e00000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 tenured generation   total 409600K, used 33182K &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000e1e00000, 0x00000000fae00000, 0x00000000fae00000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   the space 409600K,   8% used &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000e1e00000, 0x00000000e3e67938, 0x00000000e3e67a00, 0x00000000fae00000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 compacting perm gen  total 52288K, used 52123K &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000fae00000, 0x00000000fe110000, 0x0000000100000000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   the space 52288K,  99% used &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0x00000000fae00000, 0x00000000fe0e6f80, 0x00000000fe0e7000, 0x00000000fe110000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
No shared spaces configured.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;쓰레드 덤프 생성 시간 / JVM 정보가 출력이 되고 공백 라인으로 구분하여 각 쓰레드의 정보가 출력이 된다. 
마지막에는 Heap 영역 메모리의 사용현황이 출력된다. &lt;/p&gt;

&lt;p&gt;쓰레드 정보는 스페이스로 각 내용이 구분되어 진다.    &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;쓰레드 이름   &lt;/li&gt;
  &lt;li&gt;쓰레드 우선순위  &lt;/li&gt;
  &lt;li&gt;쓰레드 ID  &lt;/li&gt;
  &lt;li&gt;Natvie 쓰레드 ID  &lt;/li&gt;
  &lt;li&gt;쓰레드 상황  &lt;/li&gt;
  &lt;li&gt;쓰레드 스택 주소 범위 (from..to)  &lt;/li&gt;
  &lt;li&gt;쓰레드 스택 정보 (stack 이므로 가장 최근에 수행된 메소드가 상위에 위치한다. 가장 상위에 메소드가 수행 중인 상태에서 덤프가 시행된것.)  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Heap 영역의 정보에는 Eden, Tenured, Perm 영역의 사용량을 확인 할 수 있다. 
Eden 영역은 Young area 영역이라고도 하며, 객체가 생성되었을때 저장되는 heap 영역 중 일부이다. 
해당 영역이 꽉차게 되면 Young GC가 발생하며 살아 남은 객체는 Tenured 영역 (Old Area)로 옮겨진다.
Perm 영역은 로딩된 클래스, 메소드, meta 정보가 저장된다. &lt;/p&gt;

&lt;p&gt;Tenured, Perm 영역이 90% 이상으로 너무 높으면 out of memory error가 발생할 수 있다. &lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;쓰레드 덤프 분석&lt;/h2&gt;

&lt;p&gt;thread logic (https://java.net/projects/threadlogic) 을 이용하면 덤프 파일 분석을 편리하게 할 수 있다.&lt;br /&gt;
thread logic 을 다운로드 받으면 jar 파일을 다운로드 받을 수 있다.&lt;br /&gt;
해당 jar 파일을 아래의 명령어로 실행하면 thread logic을 실행 할 수 있다.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;java -jar threadlogic.jar&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고자료
&lt;a href=&quot;http://helloworld.naver.com/helloworld/textyle/10963&quot;&gt;스레드 덤프 분석하기&lt;/a&gt;
&lt;a href=&quot;https://java.net/downloads/threadlogic/ThreadLogic-v0.9.pdf&quot;&gt;ThreadLogic Documentation&lt;/a&gt;
자바 트러블 슈팅 가이드 (이상민님)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 20 Apr 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/04/20/threaddump.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/04/20/threaddump.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>400 Bad request</title>
        <description>&lt;p&gt;설문 서비스를 개발하면서 설문지를 제출할 때 특정한 상황에서 계속해서 400 bad request가 발생하는 버그가 발생했다.&lt;br /&gt;
사용자가 작성한 동적인 설문지 폼이 생성되기 때문에 어떤 경우에 400 bad request가 발생하는지를 알아내기가 어려웠다. &lt;/p&gt;

&lt;p&gt;로그를 확인하여 해당 에러가 발생하는 원인을 찾기로 하고, log4j 의 spring 프레임워크 logger를 debug 모드로 변경하였다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[org.springframework.context.support.DefaultMessageSourceResolvable: codes [answerList.answerList[2].answerNumber,answerList[2].answerNumber]; arguments []; default message [answerList[2].answerNumber]]; default message [Failed to convert property value of type &amp;#39;java.lang.String&amp;#39; to required type &amp;#39;int&amp;#39; for property &amp;#39;answerList[2].answerNumber&amp;#39;; nested exception is java.lang.NumberFormatException: For input string: &amp;quot;&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;내용을 보니 answerList.answerNumber는 int형 프로퍼티인데 빈 문자열인 String “” 값이 input으로 오면서 Bind Error가 나오는 것을 확인 할 수 있었다.&lt;/p&gt;

&lt;p&gt;해당 버그는 이전에는 없었던 버그 내용인데 새로 발견되었으므로 최근에 작성한 소스코드에 문제가 있을 것이라 예상하여 
최근에 작업했던 코드를 확인 해보았다. &lt;/p&gt;

&lt;p&gt;문제가 발생했던 코드는 자바스크립트 코드에 있었다.&lt;/p&gt;

&lt;p&gt;특정상황에서 input 입력 컨트롤을 초기화하는 코드가 문제였다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;checked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;text, textarea 같은 경우에는 빈 문자열로 초기화가 String형 프로퍼티에 바인딩 되어서 문제가 없었지만,
checkbox, radio 같은 경우에는 정수형 프로퍼티에 빈문자열이 바인딩 되면서 에러가 발생한 것이다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input[type=text], textarea&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;input[type=checkbox], input[type=radio]&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;checked&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;이렇게 따로 분리를 하여 초기화를 하니 해당 에러를 잡을 수 있었다.&lt;br /&gt;
에러의 원인은 간단하였는데 디버그 하는 과정이 어려웠던 경험이었다.&lt;/p&gt;
</description>
        <pubDate>Mon, 13 Apr 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/04/13/400badrequest.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/04/13/400badrequest.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>브라우저 문서모드</title>
        <description>&lt;p&gt;과거 웹 표준이 정해져 있지 않았을 때 각 브라우저마다 페이지를 표시하는 렌더링이 규칙이 달랐고, 이 때문에 같은 소스코드 임에도 불구하고 페이지가 다르게 표시되는 문제가 있다.  &lt;/p&gt;

&lt;p&gt;최근에는 웹 표준을 지켜 코드를 작성하기 때문에 최신 브라우저라면 어떤 브라우저에서나 같은 페이지를 표시 할 수 있다.&lt;br /&gt;
하지만 오래된 웹 페이지의 경우에는 최신 브라우저에서 깨져 보이거나 브라우저마다 다르게 표시되는 문제가 있다. &lt;/p&gt;

&lt;p&gt;이런 문제를 해결하고자 임시 방편으로 문서 모드라는 것을 사용하여 두 가지 렌더링 모드를 지원하게 되었다.&lt;br /&gt;
쿽스 모드는 구식의 코드(웹 표준을 지키지 않은) 가 최신 브라우저에서 정상적으로 표시하기 위한 목적으로 생겼다.&lt;br /&gt;
문서모드에는 표준모드와 쿽스모드(quirks mode)가 있다.&lt;br /&gt;
브라우저는 소스코드에 doctype에 따라 두 가지 모드 중에 선택하여 페이지를 렌더링 하게 된다.  &lt;/p&gt;

&lt;p&gt;모드를 선택하는 방법은 각 브라우저 마다 DTD에 따라 문서모드가 선택된다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Q : 쿼크모드(Quirks mode)&lt;/li&gt;
  &lt;li&gt;S : 표준모드(Standard mode)&lt;/li&gt;
  &lt;li&gt;A : Almost Standard mode &lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Doctype&lt;/th&gt;
      &lt;th&gt;NS6&lt;/th&gt;
      &lt;th&gt;Old Moz&lt;/th&gt;
      &lt;th&gt;Moz &amp;amp;Safari &amp;amp;Opera 10&amp;amp;IE10&amp;amp; HTML&lt;/th&gt;
      &lt;th&gt;Opera 9.0&lt;/th&gt;
      &lt;th&gt;IE 8, IE 9 &amp;amp; Opera 9.5&lt;/th&gt;
      &lt;th&gt;IE 7 &amp;amp; Opera 7.10&lt;/th&gt;
      &lt;th&gt;IE 6 &amp;amp; Opera 7.0&lt;/th&gt;
      &lt;th&gt;Mac IE 5&lt;/th&gt;
      &lt;th&gt;Konq 3.2&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;None&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN”&amp;gt;&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;S&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt;Q&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;이하 생략 (링크 내 테이블 참고)…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고: &lt;a href=&quot;https://hsivonen.fi/doctype/&quot;&gt;Handling of Some Doctypes in text/html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 06 Apr 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/04/06/htmldoctype.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/04/06/htmldoctype.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>AngularJS2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.w3schools.com/angular/default.asp&quot;&gt;W3school Tutorial&lt;/a&gt; 따라 해보기 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;angularjs-filter&quot;&gt;AngularJS Filter&lt;/h1&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;pipe(&lt;/td&gt;
      &lt;td&gt;)를 표현식에 사용하여 Filter를 적용 할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;uppercase : 대문자&lt;br /&gt;
{{ person.name | uppercase}}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;lowercase : 소문자&lt;br /&gt;
{{ person.name | uppercase}}&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;currency : 통화 표시 &lt;br /&gt;
{{ quantity * price | currency }}&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;통화 표시는 기본적으로는 웹 서버의 locale에 따라 표시가 된다. 
통화 표시를 지정하려면 이와 같이 해준다.&lt;br /&gt;
{{ quantity * price | currency : “원” }}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Filter: 필터를 적용한다.&lt;/li&gt;
  &lt;li&gt;orderBy: 지정한 속성으로 정렬을 한다. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;namesCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;inputVal&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x in names | filter:inputVal | orderBy:&amp;#39;country&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;xmlhttprequest&quot;&gt;XMLHttpRequest&lt;/h1&gt;

&lt;p&gt;$http는 원격서버로 부터 데이터를 읽어 오기 위한 AngularJS Service 이다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$http.get(url): url 서버로 부터 데이터를 가져오기 위한 메소드
(기본적으로 json 포맷으로 받도록 되어져 있다. xml 이나 다른 포맷의 데이터를 사용하려면 
http provider를 지정하여 사용하면 된다. )&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myApp&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;customersCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x in names&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;customersCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.w3schools.com/angular/customers.php&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;names&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;records&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;$scope는 customerCtrl Controller 을 의미한다. &lt;/li&gt;
  &lt;li&gt;$http.get()으로 원격서버로 부터 데이터를 가져와서 $scope.names에 저장한다. &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tables&quot;&gt;Tables&lt;/h1&gt;

&lt;p&gt;테이블 형태의 데이터를 출력할 때 &amp;lt;tr&amp;gt; 태그에 ng-repeat를 추가하여 데이터를 반복적으로 출력 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;tr&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x in names | orderBy : &amp;#39;Country&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;td&amp;gt;&amp;lt;/td&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/tr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;위의 예제와 같이 파이를 사용하여 정렬하여 데이터를 출력할 수 있다.&lt;/p&gt;

&lt;h1 id=&quot;html-dom&quot;&gt;HTML DOM&lt;/h1&gt;
&lt;p&gt;HTML DOM elements의 attribute에 AngularJS 데이터를 바인딩하기 위한 Driective가 있다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ng-disabled Directive
element의 disabled attribute 데이터를 바인딩 해준다. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-disabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mySwitch&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click Me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;checkbox&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mySwitch&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Button
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;checkbox mySwitch model과 버튼과 바인딩되어 checbox의 상태에 따라 버튼이 활성/비활성화 된다. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ng-show &amp;amp; ng-hide Driective 
element의 display 속성을 바인딩한다. &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-show=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I am visible.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-hide=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;I am not visible.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;참고 자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;AngularJS API Doc: https://docs.angularjs.org/api&lt;br /&gt;
w3schools AngularJS: http://www.w3schools.com/angular/default.asp  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 06 Apr 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/04/06/angularjs2.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/04/06/angularjs2.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>AngularJS_1</title>
        <description>&lt;p&gt;AngularJS (W3school Tutorial)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://www.w3schools.com/angular/default.asp&quot;&gt;W3school Tutorial&lt;/a&gt; 따라 해보기 &lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;angularjs&quot;&gt;AngularJS?&lt;/h1&gt;
&lt;p&gt;AngularJS는 opensource Javascript Framework 이다. 
Miško Hevery에 의해 개발되었으며 현재 구글이 support하고 있다. &lt;/p&gt;

&lt;h1 id=&quot;angularjs-&quot;&gt;AngularJS의 특징&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MVW(Model View Whatever) 웹 프레임워크: MVC 패턴의 개발이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SPA(Single Papge Application): 한 페이지에서 동기적으로 처리가 수행되는 페이지 개발에 유리하다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;양방향 데이터 바인딩(two-way data binding): 기존에는 DOM Element를 Select한 후에 해당 Element을 조작하는 기능을 추가하여 DOM을 조작하는 방식이 이었다.&lt;br /&gt;
AngularJS는 데이터의 변화에 따라 바로 Bind 하여 데이터 출력을 자동으로 수행한다. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tutorial&quot;&gt;Tutorial&lt;/h1&gt;

&lt;p&gt;AngularJS CDN &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.3.15/angular.min.js&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;AngularJS는 javascript framework으로 위의 CDN을 &amp;lt;body&amp;gt; 안에 추가하면 된다.&lt;br /&gt;
&amp;lt;body&amp;gt;에 넣게되면 해당 script가 load 되기 까지 lock이 안생기므로 페이지 로딩을 개선 할 수 있다.  &lt;/p&gt;

&lt;h1 id=&quot;angularjs-directives&quot;&gt;AngularJS Directives&lt;/h1&gt;

&lt;p&gt;AngularJS는  “ng-&lt;em&gt;” 라는 prefix를 갖는 attribute를 HTML 에 추가하여 확장한다.  &lt;br /&gt;
HTML5에서는 Custom Data Atrribute로 “data-ng-&lt;/em&gt;“로 사용할 수 있다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-init=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;names=[&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  {name:&amp;#39;Jani&amp;#39;,country:&amp;#39;Norway&amp;#39;},&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  {name:&amp;#39;Hege&amp;#39;,country:&amp;#39;Sweden&amp;#39;},&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  {name:&amp;#39;Kai&amp;#39;,country:&amp;#39;Denmark&amp;#39;}]&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;x in names&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ng-app: AngularJS Application을 초기화한다.  &lt;br /&gt;
attirbute에 ng-app을 추가하면 페이지가 로드되었을 때 Angular Application이 로드된다.  &lt;br /&gt;
ng-app=”moduleName” 과 같이 module을 적어주면 해당 모듈과 연결된다.   &lt;/li&gt;
  &lt;li&gt;ng-init: AngularJS application 데이터를 초기화 한다. 예제에서는 names 배열을 초기화하고 있다.   &lt;br /&gt;
주로 ng-init 보다는 controller 또는 ng-app과 연결된 모듈에서 데이터를 초기화한다.    &lt;/li&gt;
  &lt;li&gt;ng-model: HTML Controls(input, select, textarea)의 값을 Application Data에 바인딩 한다.     &lt;/li&gt;
  &lt;li&gt;ng-bind: Application Data를 HTML View에 출력한다.    &lt;/li&gt;
  &lt;li&gt;ng-repeat: collection을 순차적으로 접근(foreach)하여 HTML Element를 반복적으로 출력할 때 사용한다.    &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;angular-expressions&quot;&gt;Angular Expressions&lt;/h1&gt;

&lt;p&gt;double brace 안에 표현식을 작성하면 해당 View에 표현식의 결과가 출력된다. &lt;br /&gt;
(ng-bind Driectives 와 같은 동작을 한다.) 표현식에는 변수나 연산자, 리터럴을 넣을 수 있다.   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-init=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;firstName=&amp;#39;John&amp;#39;;lastName=&amp;#39;Doe&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The name is &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-init=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;firstName=&amp;#39;John&amp;#39;;lastName=&amp;#39;Doe&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;The name is &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-bind=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;firstName + &amp;#39; &amp;#39; + lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Object 접근&lt;br /&gt;
person = {firstName:’John’,lastName:’Doe’}&lt;br /&gt;
person.firstName   &lt;br /&gt;
결과: John    &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Array 접근&lt;br /&gt;
points=[1,15,19,2,40] &lt;br /&gt;
{{ point[0] }}  &lt;br /&gt;
결과: 1&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;angularjs-controllers&quot;&gt;AngularJS Controllers&lt;/h1&gt;
&lt;p&gt;AngularJS Application은 Controller에 의해 동작한다.&lt;br /&gt;
Contoller는 일반적인 javascript obejct 생성자에 의해 만들어지고, 하나의 javascript object로 생각하면 된다.   &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-app=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myApp&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;myCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

First Name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;firstName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Last Name: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;lastName&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
Full Name: 

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;myCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Doe&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lastName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;ng-controller에서 “myCtrl” 컨트롤을 연결하고, &amp;lt;script&amp;gt; 에서 해당 컨트롤을 작성하면 된다. &lt;br /&gt;
$scope는 controller 객체로, firstName, lastName 과 같은 프로퍼티를 추가 할 수 있으며, 메소드도 추가가 가능하다.   &lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;참고 자료&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;AngularJS 도입 선택가이드: http://helloworld.naver.com/helloworld/1172239&lt;br /&gt;
AngularJS API Doc: https://docs.angularjs.org/api&lt;br /&gt;
w3schools AngularJS: http://www.w3schools.com/angular/default.asp  &lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 30 Mar 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/03/30/angularjs.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/03/30/angularjs.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Maven Build Profiles</title>
        <description>&lt;h1 id=&quot;maven-profile&quot;&gt;Maven Profile&lt;/h1&gt;

&lt;p&gt;배포환경에 따라 설정파일이나 리소스파일을 다르게 패키징 해야하는 경우가 있다.&lt;br /&gt;
maven에서는 Profile 설정 만으로 간편하게 각 profile별로 패키징 할 수 있다. &lt;/p&gt;

&lt;p&gt;배포환경마다 달라질 수 있는 정보로는 다음과 같은 경우가 보편적이다.  &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;DB property : 각 환경별로 사용하는 DB가 다른 경우   &lt;/li&gt;
  &lt;li&gt;Logging level: 개발환경은 logging level이 debug라면 운영환경은 error 와 같이 상위 level로 하는 경우   &lt;/li&gt;
  &lt;li&gt;resource : 각 환경 별로 resource 값이나 경로가 다른 경우   &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;maven-profile-----&quot;&gt;Maven Profile 설정으로 배포환경에 따른 패키징 하기&lt;/h1&gt;

&lt;p&gt;dev(개발환경), test(테스트환경), release(운영환경)으로 나누었다. &lt;br /&gt;
src/main/java/{dev,test,release}에 각 환경별 db.properties 파일을 추가하였다. &lt;/p&gt;

&lt;p&gt;profile-sample&lt;br /&gt;
├── pom.xml&lt;br /&gt;
├── src&lt;br /&gt;
│   ├── main&lt;br /&gt;
│   │   ├── java&lt;br /&gt;
│   │   ├── resources&lt;br /&gt;
│   │   │   ├── dev&lt;br /&gt;
│   │   │   │   └── db.properties&lt;br /&gt;
│   │   │   ├── release&lt;br /&gt;
│   │   │   │   └── db.properties&lt;br /&gt;
│   │   │   └── test&lt;br /&gt;
│   │   │       └── db.properties  &lt;/p&gt;

&lt;p&gt;pom.xml에 profiles에 각 환경 별 profile을 추가하였다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Development server --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;activeByDefault&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/activeByDefault&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;env&amp;gt;&lt;/span&gt;dev&lt;span class=&quot;nt&quot;&gt;&amp;lt;/env&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- test server --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;beta&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;env&amp;gt;&lt;/span&gt;beta&lt;span class=&quot;nt&quot;&gt;&amp;lt;/env&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- release server --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;env&amp;gt;&lt;/span&gt;release&lt;span class=&quot;nt&quot;&gt;&amp;lt;/env&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;각 환경별로 resource의 경로를 설정해준다. 
${env}는 profile에 설정한 properties의 &lt;env&gt; 이다. &lt;/env&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/resources/${env}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;testResources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;testResource&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/test/resources/resources/${env}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/testResource&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/testResources&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;각 환경별로 패키징을 하려면 mvn clean package -P “프로파일id” 로 실행한다. &lt;/p&gt;

&lt;p&gt;mvn clean package dev &lt;br /&gt;
mvn clean package test&lt;br /&gt;
mvn clean package release   &lt;/p&gt;

&lt;p&gt;(만일 -P 옵션을 제거하고 패키징한다면, profile에 activeByDefault로 설정된 dev profile로 패키징된다.)  &lt;/p&gt;

&lt;p&gt;각 profile별로 db.properties가 배포 파일에 추가된 것을 확인 할 수 있다. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://maven.apache.org/guides/introduction/introduction-to-profiles.html&quot;&gt;Introduction to Build Profiles&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 23 Mar 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/03/23/maven_profiles.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/03/23/maven_profiles.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
