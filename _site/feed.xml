<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hyungwon ,Yoon</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://iyoon.github.io/</link>
    <atom:link href="http://iyoon.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 25 Feb 2015 19:17:21 +0900</pubDate>
    <lastBuildDate>Wed, 25 Feb 2015 19:17:21 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>(OSX) Apache Tomcat 연동하기</title>
        <description>&lt;p&gt;개발환경에서 웹 프로젝트를 실행 할 때 보통 Tomcat Server만 설치하여 사용하는 경우가 많다.&lt;br /&gt;
하지만, 개발을 하다보면 개발환경에서 Apache가 필요한 경우가 있다.  &lt;/p&gt;

&lt;p&gt;대부분의 OS에는 Apache를 별도로 설치해야하지만 OSX에는 기본으로 Apache가 깔려있다.
(이하 내용은 OSX Yosemite 10.10.1 버전 기준으로 작성 되었습니다. )&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache 설치 경로&lt;/strong&gt;&lt;br /&gt;
/etc/apache2&lt;/p&gt;

&lt;p&gt;├── extra&lt;br /&gt;
│   ├── httpd-autoindex.conf&lt;br /&gt;
│   ├── httpd-dav.conf&lt;br /&gt;
│   ├── httpd-default.conf&lt;br /&gt;
│   ├── httpd-info.conf&lt;br /&gt;
│   ├── httpd-languages.conf&lt;br /&gt;
│   ├── httpd-manual.conf&lt;br /&gt;
│   ├── httpd-mpm.conf&lt;br /&gt;
│   ├── httpd-multilang-errordoc.conf&lt;br /&gt;
│   ├── httpd-ssl.conf&lt;br /&gt;
│   ├── httpd-ssl.conf~orig&lt;br /&gt;
│   ├── httpd-userdir.conf&lt;br /&gt;
│   ├── httpd-vhosts.conf&lt;br /&gt;
│   ├── mod_hgc.conf&lt;br /&gt;
│   └── proxy-html.conf&lt;br /&gt;
├── httpd.conf&lt;br /&gt;
└── workers.properties&lt;br /&gt;
… (생략)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apache Log&lt;/strong&gt;&lt;br /&gt;
/private/var/log/apache2&lt;/p&gt;

&lt;p&gt;먼저 Apache와 Tomcat 연동을 위해서는 mod_jk(tomcat connector)를 설치 해야 한다. &lt;br /&gt;
http://tomcat.apache.org/connectors-doc/ 에서 다운로드 한다. &lt;/p&gt;

&lt;p&gt;받은 파일은 source 파일이므로 컴파일을 하여서 mod_jk.so 파일을 만들어야한다. &lt;/p&gt;

&lt;p&gt;다운로드 받은 파일을 압축을 풀고 아래 내용을 실행한다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;./configure
sudo make  
sudo make install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;mod_jk.so 파일을 apache module이 저장되어 있는 경로로 /usr/libexec/apache2 이동 시킨다. &lt;/p&gt;

&lt;p&gt;/etc/apache2/httpd.conf 에 아래 내용을 추가한다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;LoadModule jk_module libexec/apache2/mod_jk.so

&amp;lt;IfModule mod_jk.c&amp;gt;
JkMount /* tomcat
JkWorkersFile &lt;span class=&quot;s2&quot;&gt;&amp;quot;/etc/apache2/workers.properties&amp;quot;&lt;/span&gt;
JkLogFile &lt;span class=&quot;s2&quot;&gt;&amp;quot;/private/var/log/apache2/mod_jk.log&amp;quot;&lt;/span&gt;
JkLogLevel error
&amp;lt;/IfModule&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;/* 모든 하위 실행에 대해서 tomcat이라는 worker로 보내겠다는 의미이다.&lt;br /&gt;
tomcat 은 workers.properties에 정의 되어있다. &lt;/p&gt;

&lt;p&gt;/etc/apache2/workers.properties 위치에 workers.properties 파일을 생성한다. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;workers.properties&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;worker.list&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tomcat
worker.tomcat.type&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ajp13
worker.tomcat.port&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8009
worker.tomcat.socket_timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
worker.tomcat.connection_pool_timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apache를 재시작하기 위해 먼저 Apache를 stop 한다.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apachectl stop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Apache를 시작하기 전에 config 파일이 제대로 작성되었는지 검사를 한다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;apachectl -t&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;config 파일에 문제가 없으면 apache를 시작한다.  &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo apachectl start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;그럼 끝! &lt;/p&gt;

</description>
        <pubDate>Thu, 26 Feb 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/02/26/apache-tomcat-modjk.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/02/26/apache-tomcat-modjk.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>SSL의 동작원리2 (SSL인증서)</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;지난 포스트&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://iyoon.github.io/jekyll/update/2015/02/14/about_ssl.html&quot;&gt;SSL의 동작원리1 암호화 알고리즘&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;지난 포스트에서는 HTTP 통신은 암호화되지 않은 평문으로 전송이 되기 때문에 도청이나 변조의 위험이 있고, 
그에 대한 대응 방안으로 암호화의 필요성과 대칭키/공개키 알고리즘에 대하여 작성하였다. &lt;/p&gt;

&lt;p&gt;이번 포스트에서는 SSL과 관련된 용어를 정리하였다. &lt;/p&gt;

&lt;h1 id=&quot;https&quot;&gt;HTTPS&lt;/h1&gt;

&lt;p&gt;HTTPS 통신은 아래 그림과 같이 HTTP(application) 하위 계층에 SSL이 있다. 
SSL은 데이터를 암호화와 클라이언트와 서버간의 신뢰를 보장하기 위한 인증의 역할을 한다. &lt;/p&gt;

&lt;h1 id=&quot;ssl--&quot;&gt;SSL 인증서의 기능&lt;/h1&gt;

&lt;p&gt;SSL 인증서의 기능은 크게 2가지이다.
1. 클라이언트가 접속하려는 서버가 신뢰 할 수 있는 서버인지를 보장한다. 
2. 클라이언트와 서버가 통신할 때 암호화 방법을 알려준다. &lt;/p&gt;

&lt;h1 id=&quot;ssl---1&quot;&gt;SSL 인증서의 내용&lt;/h1&gt;
&lt;p&gt;SSL 인증서에는 아래와 같은 정보들이 있다. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;SSL 인증서 발급기관(CA)에 대한 정보 (발급기관, 공개키)&lt;/li&gt;
  &lt;li&gt;SSL 인증서가 설치된 사이트에 대한 정보 &lt;/li&gt;
  &lt;li&gt;암호화 방식 &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;ca-certificate-authority--root-certificate&quot;&gt;CA (Certificate Authority | Root Certificate)&lt;/h1&gt;
&lt;p&gt;CA는 SSL 인증서를 발급해주는 신뢰 할 수 있는 기업이다. 
CA 업체 리스트는 아래와 같은 기업들이 있다. &lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Symantec (VeriSign, Thawte, Geotrust)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;COMODO&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GlobalSign&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Go Daddy &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;DigiCert&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이런 CA 기업이 필요한 이유는 사이트를 제공하는 서버의 공개키가 신뢰할 수 있는 공개키인지를 보장해주기 위해서이다.   &lt;/p&gt;

&lt;h1 id=&quot;how------&quot;&gt;How 신뢰 할 수 있는 사이트임을 보장?&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;사이트 제공자가 CA 인증기관에 공개키를 제출을 하면 CA는 제출 받은 공개키와 사이트에 대한 정보를 인증서에 담아 비밀키로 암호화 한다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CA는 해당 인증서를 사이트 제공자에게 발급해준다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;클라이언트가 사이트에 접속하게 되면 사이트 제공자는 CA로 부터 받은 인증서를 클라이언트에게 준다. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;브라우저 내에는 CA 리스트와 공개키가 모두 저장되어져 있다. 
(브라우저 내에 없는 CA는 인터넷 상에서 신뢰 할 수 없는 증명서이며, 이런 증명서는 브라우저에서 https 프로토콜에 취소선이 그어져 있거나, “이 사이트의 보안 증명서에는 문제가 있습니다.” 같은 메시지가 표시된다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;클라이언트의 브라우저는 해당 인증서를 읽어 어떤 CA인지를 파악 후, 해당 CA의 공개키로 인증서를 복호화하게 된다. 
제대로 복호화가 된다면 해당 인증서는 CA에 의해 암호화된 신뢰 할 수 있는 인증서임을 알 수 있게 된다. &lt;/p&gt;

&lt;p&gt;또, 사이트 제공자가 제출한 공개키 또한 인증서 내에 내포되어 있기 때문에 중간에 변조를 할 수 없기 때문에 서버의 공개키를 안전하게 클라이언트에게 제공해준다. &lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;참고자료&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://ucert.tistory.com/146&quot;&gt;인증서 발급기관&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://opentutorials.org/course/228/4894&quot;&gt;생활코딩 HTTPS와 SSL 인증서&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;그림으로 배우는 Http Network Basic (우에노 센)&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 22 Feb 2015 22:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/02/22/about_ssl2.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/02/22/about_ssl2.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Javascript Template Engine (jQuert tmpl)</title>
        <description>&lt;p&gt;DOM에 데이터를 추가 할 때 아래와같이 append()로 데이터를 추가하게 된다. &lt;/p&gt;

&lt;h1 id=&quot;listhtml&quot;&gt;list.html&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;caption&amp;gt;연락처&amp;lt;/caption&amp;gt;
    &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;이름&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;전화번호&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody id=&quot;list&quot; &amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;listjs&quot;&gt;list.js&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var data = [{&#39;name&#39;:&#39;yoon&#39;, &#39;tel&#39;: &#39;010-0000-0000&#39;}, {&#39;name&#39;:&#39;kim&#39;, &#39;tel&#39;:&#39;010-1111-1111&#39;}];
var appendData = &quot;&quot;;
$.each(data, function(index, value) { 
    appendData += &quot;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&quot; + value.name + &quot;&amp;lt;/td&amp;gt; &quot; +  &quot; &amp;lt;td&amp;gt; &quot; + value.tel + &quot; &amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&quot;;
});
$(&quot;#list&quot;).append(appendData);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;간단한 리스트를 추가함에도 불구하고 많은 문자열 연결연산이 필요하고 복잡하다. 
반복적으로 추가 되는 부분이 복잡해 질 수록 해당 코드는 더 복잡해지기 때문에 관리하기도 어렵고, 개발자가 실수 하기도 쉽다.  &lt;/p&gt;

&lt;p&gt;자바에서는 JSP를 통해 템플릿을 만든다. 
자바스크립트에서도 이런 템플릿을 만들 수 있는 자바스크립 템플릿 엔진이 있다. 
이렇게 템플릿을 사용하게되면 데이터모델(json) 과 뷰(template)을 분리 할 수 있는 장점이 있다. &lt;/p&gt;

&lt;h1 id=&quot;javscript-template-engine-&quot;&gt;Javscript Template Engine의 종류&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;pure (http://beebole.com/pure/) &lt;/li&gt;
  &lt;li&gt;jTemplates(http://jtemplates.tpython.com/)&lt;/li&gt;
  &lt;li&gt;trimpath JavaScriptTemplates (http://code.google.com/p/trimpath/wiki/JavaScriptTemplates)&lt;/li&gt;
  &lt;li&gt;jQuery tmpl (https://github.com/BorisMoore/jquery-tmpl)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;다양한 자바스크립트 템플릿 엔진 라이브러리들이 많다.
템플릿 엔진별로 제공하는 기능이나 문법이 다르기 때문에 Documents를 읽어보고 사용하기 편한 엔진을 사용하는게 좋을것 같다.&lt;/p&gt;

&lt;p&gt;javascript template engine 중 하나인 jquery tmpl을 사용해보았다. &lt;/p&gt;

&lt;p&gt;list.html 
	&lt;script id=&quot;template-tel&quot; type=&quot;text/j-query-tmpl&quot;&gt;
	    &amp;lt;tr&amp;gt;
	        &amp;lt;td&amp;gt;${name}&amp;lt;/td&amp;gt;
	        &amp;lt;td&amp;gt;${tel}&amp;lt;/td&amp;gt;
	    &amp;lt;tr&amp;gt;
	&lt;/script&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;
    &amp;lt;caption&amp;gt;연락처(template)&amp;lt;/caption&amp;gt;
    &amp;lt;thead&amp;gt;
        &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;이름&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;전화번호&amp;lt;/th&amp;gt;
        &amp;lt;/tr&amp;gt;
    &amp;lt;/thead&amp;gt;
    &amp;lt;tbody id=&quot;template-list&quot;&amp;gt;
    &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;listjs-1&quot;&gt;list.js&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;var data = [{&#39;name&#39;:&#39;yoon&#39;, &#39;tel&#39;: &#39;010-0000-0000&#39;}, {&#39;name&#39;:&#39;kim&#39;, &#39;tel&#39;:&#39;010-1111-1111&#39;}];
$(&quot;#template-tel&quot;).tmpl(data).appendTo(&quot;#template-list&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;반복적인 템플릿은 템플릿 코드로 분리하고, 태그를 사용하여 키 값으로 해당 데이터를 표시할 수 있다.  &lt;/p&gt;

&lt;h1 id=&quot;jquery-tmpl-&quot;&gt;jQuery tmpl 태그&lt;/h1&gt;

&lt;p&gt;jquery tmpl 에서는 다음과 같은 태그를 제공한다.&lt;/p&gt;

&lt;h2 id=&quot;if--else&quot;&gt;if / else&lt;/h2&gt;

&lt;p&gt;if ~ else 구문을 사용 할 수 있다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{{if item.length &amp;gt; 0 }}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt; ${item} &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{{else}}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;empty item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; 
{{/if}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;html&quot;&gt;html&lt;/h2&gt;

&lt;p&gt;html 태그를 문자열로 출력한다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{{html &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;item&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;each&quot;&gt;each&lt;/h2&gt;

&lt;p&gt;컬렌션의 모든 요소에 대해 반복문을 수행한다. &lt;br /&gt;
index는 each 내부에서 $index 로 사용하면 된다.    &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{{each list}}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${index + 1} 번째 데이터&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${item}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{{/each}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;index와 컬렉션 아이템을 변수명으로 지정하고자 하는 경우에는 아래와 같이 쓴다. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{{each(i,item)  list}}
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${i + 1} 번째 데이터&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;${item}&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
{{/each}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;더 자세한 내용은 http://borismoore.github.io/jquery-tmpl/demos/step-by-step.html 참고&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Mon, 16 Feb 2015 05:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/02/16/javascript-template-engine.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/02/16/javascript-template-engine.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>SSL의 동작원리1 (암호화 알고리즘)</title>
        <description>&lt;h1 id=&quot;section&quot;&gt;데이터를 안전하게 전송하려면?&lt;/h1&gt;
&lt;p&gt;인터넷을 하다보면 포털사이트 혹은 쇼핑몰 등의 사이트에서 브라우저 마다 다르지만 주소를 적는 부분에 자물쇠 모양으로 신뢰감을 주는 페이지를 볼 수 있다.
이런 페이지는 대부분 개인정보를 적는 페이지나 로그인을 하는 페이지에서 많이 볼 수 있다.
http 프로토콜에서의 통신은 URL이나 header에 평문으로 데이터를 전송하기 때문에 중간에 누군가가 패킷을 가로채기라도 한다면 개인정보는 그대로 노출 될 수 있다.
이 문제를 해결하려면 클라이언트가 서버로 데이터를 전송 할 때 암호화해 전송하고 서버에서는 복호화하면 된다.
데이터를 암호화 하는 알고리즘의 종류인 대칭키 알고리즘과 공개키 알고리즘에 대해 먼저 살펴보자!&lt;/p&gt;

&lt;h1 id=&quot;section-1&quot;&gt;대칭키 알고리즘&lt;/h1&gt;
&lt;p&gt;대칭키 알고리즘은 데이터를 암호화 하고 복호화 할 때 같은 암호키를 사용하는 암호화 알고리즘이다.
즉, 클라이언트와 서버가 같은 암호화 키를 공유해야 한다는 의미이다.
먼저 서버는 클라이언트에게 암호화 키를 건네주면 클라이언트는 건네받은 암호화키로 데이터를 암호화하여 서버에 전송하면 된다. 
문제는 서버가 클라이언트에게 암호화 키를 건네 줄 때다. 
기껏 데이터는 암호화 했지만 정작 암호화 키는 암호화 되어 있지 않기 때문에 암호화 키가 노출 되었을 때 데이터는 쉽게 복호화 될 것 이다.
바로 이런 키 관리가 어렵다는 점이 대칭키 알고리즘의 큰 단점이다. 
장점으로는 암호화 키를 한 개만 사용하기 때문에 암호화나 복호화를 할 때 비용이 적게 든다는 것이다.&lt;/p&gt;

&lt;h1 id=&quot;section-2&quot;&gt;공개키 알고리즘&lt;/h1&gt;
&lt;p&gt;공개키 알고리즘은 대칭키 알고리즘과 다르게  공개키(public key) 와 비밀키 (private key), 2개의  암호화 키를 사용한다.  (비밀키는 개인키라고도 부른다.)
공개키 알고리즘은 공개키를 통해 암호화 된 데이터는 비밀키로만 복호화 할 수 있다. 또, 비밀키로 암호화된 데이터는 공개키로만 복호화 할 수 있다.
왜 이렇게 키를 2개는 쓰는 것일까?
대칭키 알고리즘의 문제점을 말했다시피 암호와 복호화를 하는 데 하나의 키값을 쓰고, 키 값을 서로 공유할 때 노출 될 수 있는 문제점이 있다.
하지만 공개키 알고리즘에서는 공개키를 누구에게나 공개해도 상관없다. 공개키로 암호화 된 데이터는 비밀키로만 복호화 할 수 있기 때문이다.
따라서 공개키는 공유하고 비밀키만 안전하게 보관한다면 암호화 된 데이터를 복호화 하긴 어려울 것이다.&lt;/p&gt;

&lt;p&gt;공개키 알고리즘은 이처럼 2개의 키를 사용함으로서 대칭키 알고리즘에 비해 훨씬 안전하게 키를 공유하고 데이터를 암호화 할 수 있다는 장점이있다.
단점은 2개의 키로 암호화를 하다보니 암호화/복호화 하는데 비용이 크다는 문제점이 있다.&lt;/p&gt;

&lt;h1 id=&quot;ssl--&quot;&gt;SSL의 암호화 알고리즘?&lt;/h1&gt;
&lt;p&gt;SSL 에서는 위에서 본 2개의 알고리즘 중 어떤 것을 사용 할 까?  나는 당연히 공개키 알고리즘을 사용 해야 한다고 생각했다.
SSL은 대칭키 알고리즘과 공개키 알고리즘 둘 다 사용한다.
그 이유는 각 알고리즘의 장점을 보면 알 수 있듯이 대칭키 알고리즘은 암호화/복호화 비용이 적고, 공개키 알고리즘은 키 관리와 보안에 우수한 장점을 섞는 편이 훨씬 좋기 때문이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;참고자료
&lt;a href=&quot;http://ko.wikipedia.org/wiki/%EC%95%94%ED%98%B8%ED%95%99&quot;&gt;암호화 알고리즘&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
        <pubDate>Sun, 15 Feb 2015 03:00:00 +0900</pubDate>
        <link>http://iyoon.github.io/jekyll/update/2015/02/15/about_ssl.html</link>
        <guid isPermaLink="true">http://iyoon.github.io/jekyll/update/2015/02/15/about_ssl.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
